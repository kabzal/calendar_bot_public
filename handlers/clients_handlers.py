from aiogram import Router
from aiogram.filters import Text
from aiogram.types import CallbackQuery
from datetime import date, datetime
from filters.filters import IsClientCall, IsValidDate, IsAppData
from lexicon.lexicon_clients import LEX_CLIENTS_MESSAGES
from sql_requests.sql_requests import show_appointments, show_free_times, show_the_appointment, cancel_appointment
from keyboards.kb_total import kb_clients_appointments
from keyboards.kb_clients import kb_main_client, kb_free_times, kb_ok_cancel_func, kb_return_to_apps

router: Router = Router()
router.callback_query.filter(IsClientCall())



@router.callback_query(Text(text='my_appointments'))
async def show_clients_appointments(callback: CallbackQuery):
    list_of_apps = await show_appointments(callback.from_user.id)
    if list_of_apps:
        kb_clients_appointments_builder = await kb_clients_appointments(list_of_apps)
        await callback.message.edit_text(text='–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –∑–∞–ø–∏—Å–∏ –∫ —ç–∫—Å–ø–µ—Ä—Ç—É:', reply_markup=kb_clients_appointments_builder.as_markup())
    else:
        kb_clients_appointments_builder = await kb_clients_appointments(list_of_apps)
        await callback.message.edit_text(text='–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏ ü§∑‚Äç‚ôÇ', reply_markup=kb_clients_appointments_builder.as_markup())

@router.callback_query(Text(text='back_to_begining'))
async def back_to_clients_beginning(callback: CallbackQuery):
    await callback.message.edit_text(LEX_CLIENTS_MESSAGES['start_message'], reply_markup=kb_main_client)

@router.callback_query(IsValidDate())
async def date_chosen(callback: CallbackQuery, dates_list: list[int]):
    current_date = str(date(day=dates_list[0], month=dates_list[1], year=dates_list[2]))
    free_times = await show_free_times(callback.from_user.id, current_date)
    kb_free_times_builder = await kb_free_times(free_times, current_date)
    if free_times:
        await callback.message.edit_text(text='–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è:', reply_markup=kb_free_times_builder.as_markup())
    else:
        await callback.message.edit_text(text='–ö–∞–∂–µ—Ç—Å—è, –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —á–∞—Å–æ–≤ –¥–ª—è –∑–∞–ø–∏—Å–∏', reply_markup=kb_free_times_builder.as_markup())

@router.callback_query(IsAppData())
async def app_opened(callback: CallbackQuery, app_data: list[str]):
    app_date = app_data[2]
    app_time = app_data[1]
    the_appointment = await show_the_appointment(user_id=callback.from_user.id, app_date=app_date, app_time=app_time)
    formatted_date = datetime.strftime(datetime.strptime(app_date, "%Y-%m-%d"), "%d.%m.%Y")
    kb_ok_cancel = (await kb_ok_cancel_func(current_date=app_date, current_time=app_time))[0]
    await callback.message.edit_text(text='–í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –∫ —ç–∫—Å–ø–µ—Ä—Ç—É\n'
                                        f'–Ω–∞ <b>{formatted_date}</b> –≤ <b>{app_time}</b>\n\n'
                                        '<b>–°—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏</b>: 1000 —Ä—É–±–ª–µ–π\n\n'
                                        '–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n'
                                        f'<b>–§–ò–û</b>: {the_appointment[0][3]}\n'
                                        f'<b>–¢–µ–ª–µ—Ñ–æ–Ω</b>: {the_appointment[0][4]}\n\n'
                                        '–ï—Å–ª–∏ —É –í–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø–ª–∞–Ω—ã, –í—ã –º–æ–∂–µ—Ç–µ '
                                        '–æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å. –î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '
                                        '<b>"–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å"</b>', reply_markup=kb_ok_cancel)


def check_cancel_app(callback: CallbackQuery):
    return callback.data.startswith('cancel_app')

def check_sure_cancel_app(callback: CallbackQuery):
    return callback.data.startswith('sure_cancel_app')

@router.callback_query(check_cancel_app)
async def client_cancel_app(callback: CallbackQuery):
    app_date = callback.data.split()[1]
    app_time = callback.data.split()[2]
    kb_sure_cancel = (await kb_ok_cancel_func(current_date=app_date, current_time=app_time))[1]
    await callback.message.edit_text(text='–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å?', reply_markup=kb_sure_cancel)

@router.callback_query(check_sure_cancel_app)
async def client_sure_cancel_app(callback: CallbackQuery):
    app_date = callback.data.split()[1]
    app_time = callback.data.split()[2]
    await cancel_appointment(user_id=callback.from_user.id, app_date=app_date, app_time=app_time)
    await callback.message.edit_text(text='–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞.', reply_markup=kb_return_to_apps)
