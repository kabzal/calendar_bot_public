from aiogram import Router
from aiogram.filters import Text
from aiogram.types import CallbackQuery
from datetime import date, datetime

from filters.filters import IsAdminCall, IsValidDate, IsAppData, IsAdminMess
from lexicon.lexicon_admin import LEX_ADMIN_MESSAGES
from sql_requests.sql_requests import show_appointments, show_all, change_user_date, show_the_appointment, cancel_appointment, delete_time
from keyboards.kb_total import kb_clients_appointments
from keyboards.kb_admin import kb_main_admin, kb_all_times, kb_ok_cancel_func, kb_return_to_clients, kb_delete_free_time_func, kb_cancel_app_from_calendar

router: Router = Router()
# –§–∏–ª—å—Ç—Ä—ã –Ω–∞ –∫–æ–ª–ª–±—ç–∫–∏ –∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∞
router.callback_query.filter(IsAdminCall())
router.message.filter(IsAdminMess())


# –û—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è —Å–ø–∏—Å–æ–∫ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
@router.callback_query(Text(text='my_clients'))
async def show_admin_appointments(callback: CallbackQuery):
    list_of_apps = await show_appointments(callback.from_user.id)
    if list_of_apps:
        kb_admin_appointments_builder = await kb_clients_appointments(list_of_apps)
        await callback.message.edit_text(text='–ó–∞–ø–∏—Å–∏ –∫ –≤–∞–º',
                                         reply_markup=kb_admin_appointments_builder.as_markup())
    else:
        kb_admin_appointments_builder = await kb_clients_appointments(list_of_apps)
        await callback.message.edit_text(text='–ö –≤–∞–º –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏',
                                         reply_markup=kb_admin_appointments_builder.as_markup())


# –í–æ–∑–≤—Ä–∞—Ç –≤ —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞
@router.callback_query(Text(text='back_to_begining'))
async def back_to_admin_beginning(callback: CallbackQuery):
    await callback.message.edit_text(text=LEX_ADMIN_MESSAGES['start_message'],
                                     reply_markup=kb_main_admin)


# –í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ, –≤—ã—Å–≤–µ—á–∏–≤–∞—é—Ç—Å—è —Å–≤–æ–±–æ–¥–Ω—ã–µ –∏ –∑–∞–Ω—è—Ç—ã–µ —á–∞—Å—ã
@router.callback_query(IsValidDate())
async def date_chosen(callback: CallbackQuery, dates_list: list[int]):

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
    current_date = str(date(day=dates_list[0], month=dates_list[1], year=dates_list[2]))
    await change_user_date(user_id=callback.from_user.id, cur_date=current_date)

    # –í—ã–≥—Ä—É–∂–∞–µ–º –∏ –≤—ã–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –æ–∫–æ–Ω –∏ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –≤ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
    all_times = await show_all(callback.from_user.id, current_date)
    kb_all_times_builder = await kb_all_times(all_times, current_date)

    if all_times:
        await callback.message.edit_text(text='–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:\n\nüü¢ - —ç—Ç–æ –≤—Ä–µ–º—è —Å–≤–æ–±–æ–¥–Ω–æ\nüî¥ - –Ω–∞ —ç—Ç–æ –≤—Ä–µ–º—è –µ—Å—Ç—å –∑–∞–ø–∏—Å—å', reply_markup=kb_all_times_builder.as_markup())
    else:
        await callback.message.edit_text(text='–ß–∞—Å—ã –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã', reply_markup=kb_all_times_builder.as_markup())


# –í—ã–±—Ä–∞–Ω–∞ –∫–∞–∫–∞—è-–Ω–∏–±—É–¥—å –±—Ä–æ–Ω—å (–∑–∞–ø–∏—Å—å –∫–ª–∏–µ–Ω—Ç–∞)
@router.callback_query(IsAppData())
async def app_opened(callback: CallbackQuery, app_data: list[str]):
    app_date = app_data[2]  # –ò–∑ –∫–æ–ª–ª–±—ç–∫–∞ –≤—ã–≥—Ä—É–∂–∞–µ—Ç—Å—è –¥–∞—Ç–∞
    app_time = app_data[1]  # –ò–∑ –∫–æ–ª–ª–±—ç–∫–∞ –≤—ã–≥—Ä—É–∂–∞–µ—Ç—Å—è –≤—Ä–µ–º—è

    # –í—ã–≥—Ä—É–∂–∞–µ—Ç—Å—è –∑–∞–ø–∏—Å—å –∏–∑ –ë–î –ø–æ –¥–∞—Ç–µ –∏ –≤—Ä–µ–º–µ–Ω–∏
    the_appointment = await show_the_appointment(user_id=callback.from_user.id, app_date=app_date, app_time=app_time)
    formatted_date = datetime.strftime(datetime.strptime(app_date, "%Y-%m-%d"), "%d.%m.%Y")

    # –í—ã–¥–∞–µ–º –∏–Ω—Ñ–æ –æ –∑–∞–ø–∏—Å–∏ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
    kb_ok_cancel = (await kb_ok_cancel_func(current_date=app_date, current_time=app_time))[0]
    await callback.message.edit_text(text='–ö –≤–∞–º –∑–∞–ø–∏—Å—å\n'
                                        f'–Ω–∞ {formatted_date} –≤ {app_time}\n\n'
                                        '<b>–°—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏</b>: 1000 —Ä—É–±–ª–µ–π\n\n'
                                        '–î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞:\n'
                                        f'–§–ò–û: {the_appointment[0][3]}\n'
                                        f'–¢–µ–ª–µ—Ñ–æ–Ω: {the_appointment[0][4]}\n\n'
                                        '–ï—Å–ª–∏ —É –í–∞—Å –¥—Ä—É–≥–∏–µ –ø–ª–∞–Ω—ã, –í—ã –º–æ–∂–µ—Ç–µ '
                                        '–æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å. –î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '
                                        '"–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å"', reply_markup=kb_ok_cancel)


def check_cancel_app(callback: CallbackQuery):
    return callback.data.startswith('cancel_app ')


def check_sure_cancel_app(callback: CallbackQuery):
    return callback.data.startswith('sure_cancel_app ')


@router.callback_query(check_cancel_app)
async def client_cancel_app(callback: CallbackQuery):
    app_date = callback.data.split()[1]
    app_time = callback.data.split()[2]
    kb_sure_cancel = (await kb_ok_cancel_func(current_date=app_date, current_time=app_time))[1]
    await callback.message.edit_text(text=('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å?'), reply_markup=kb_sure_cancel)


@router.callback_query(check_sure_cancel_app)
async def client_sure_cancel_app(callback: CallbackQuery):
    app_date = callback.data.split()[1]
    app_time = callback.data.split()[2]
    await cancel_appointment(user_id=callback.from_user.id, app_date=app_date, app_time=app_time)
    await callback.message.edit_text(text='–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞.', reply_markup=kb_return_to_clients)


def all_time_chosen(callback: CallbackQuery):
    return callback.data.startswith('all_times')


# –í –∫–∞–ª–µ–Ω–¥–∞—Ä–µ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –¥–µ–Ω—å –≤—ã–±—Ä–∞–Ω–∞ —Å–≤–æ–±–æ–¥–Ω–∞—è –∏–ª–∏ –∑–∞–Ω—è—Ç–∞—è –∑–∞–ø–∏—Å—å
@router.callback_query(all_time_chosen)
async def admin_chose_all_times(callback: CallbackQuery):
    app_date = callback.data.split()[2]
    app_time = callback.data.split()[1]
    free_or_app = callback.data.split()[3]
    if free_or_app == 'free':
        kb_delete_free_time = (await kb_delete_free_time_func(app_date, app_time))[0]
        await callback.message.edit_text(text=f'–í —ç—Ç–æ—Ç –¥–µ–Ω—å –≤ {app_time} —Å–≤–æ–±–æ–¥–Ω–æ. –ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ –≤—Ä–µ–º—è –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è, –Ω–∞–∂–º–∏—Ç–µ "–£–¥–∞–ª–∏—Ç—å"', reply_markup=kb_delete_free_time)
    elif free_or_app == 'appointment':
        the_appointment = await show_the_appointment(user_id=callback.from_user.id, app_date=app_date, app_time=app_time)
        formatted_date = datetime.strftime(datetime.strptime(app_date, "%Y-%m-%d"), "%d.%m.%Y")
        kb_ok_cancel = (await kb_cancel_app_from_calendar(current_date=app_date, current_time=app_time))[0]
        await callback.message.edit_text(text='–ö –≤–∞–º –∑–∞–ø–∏—Å—å\n'
                                            f'–Ω–∞ {formatted_date} –≤ {app_time}\n\n'
                                            '<b>–°—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏</b>: 1000 —Ä—É–±–ª–µ–π\n\n'
                                            '–î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞:\n'
                                            f'–§–ò–û: {the_appointment[0][3]}\n'
                                            f'–¢–µ–ª–µ—Ñ–æ–Ω: {the_appointment[0][4]}\n\n'
                                            '–ï—Å–ª–∏ —É –í–∞—Å –¥—Ä—É–≥–∏–µ –ø–ª–∞–Ω—ã, –í—ã –º–æ–∂–µ—Ç–µ '
                                            '–æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å. –î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '
                                            '"–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å"', reply_markup=kb_ok_cancel)


def del_free_time_chosen(callback: CallbackQuery):
    return callback.data.startswith('delete_free_time')


# –£–¥–∞–ª–µ–Ω–∏–µ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏
@router.callback_query(del_free_time_chosen)
async def delete_free_time_process(callback: CallbackQuery):
    current_date = callback.data.split('=')[2]
    current_time = callback.data.split('=')[1]
    await delete_time(user_id=callback.from_user.id, app_date=current_date, app_time=current_time)
    kb_free_time_deleted = (await kb_delete_free_time_func(current_date, current_time))[1]
    await callback.message.edit_text(text='–í—Ä–µ–º—è —É–¥–∞–ª–µ–Ω–æ.', reply_markup=kb_free_time_deleted)


def check_cancel_app_from_calendar(callback: CallbackQuery):
    return callback.data.startswith('cancel_app_from_calendar')


def check_sure_cancel_app_from_calendar(callback: CallbackQuery):
    return callback.data.startswith('sure_cancel_app_from_calendar')


# –ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏
@router.callback_query(check_cancel_app_from_calendar)
async def client_cancel_app(callback: CallbackQuery):
    app_date = callback.data.split()[1]
    app_time = callback.data.split()[2]
    kb_sure_cancel = (await kb_cancel_app_from_calendar(current_date=app_date,
                                                        current_time=app_time))[1]
    await callback.message.edit_text(text='–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å?',
                                     reply_markup=kb_sure_cancel)


# –û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
@router.callback_query(check_sure_cancel_app_from_calendar)
async def client_sure_cancel_app(callback: CallbackQuery):
    current_date = callback.data.split()[1]
    current_time = callback.data.split()[2]
    kb_app_deleted = (await kb_delete_free_time_func(current_date, current_time))[1]
    await cancel_appointment(user_id=callback.from_user.id,
                             app_date=current_date,
                             app_time=current_time)
    await callback.message.edit_text(text='–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞.',
                                     reply_markup=kb_app_deleted)
